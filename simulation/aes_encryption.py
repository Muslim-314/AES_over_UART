# -*- coding: utf-8 -*-
"""AES_encryption.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yELLYfX7g5p9Qp7aG8Krmg5YUB2W13Re
"""

import numpy as np

ROUND_KEY = np.array([
    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 0, 9, 8], [7, 6, 5, 4]],
    [[111, 105, 241, 193], [106, 111, 246, 201], [99, 111, 255, 193], [100, 105, 250, 197]],
    [[148, 68, 87, 130], [254, 43, 161, 75], [157, 68, 94, 138], [249, 45, 164, 79]],
    [[72, 13, 211, 27], [182, 38, 114, 80], [43, 98, 44, 218], [210, 79, 136, 149]],
    [[196, 201, 249, 174], [114, 239, 139, 254], [89, 141, 167, 36], [139, 194, 47, 177]],
    [[241, 220, 49, 147], [131, 51, 186, 109], [218, 190, 29, 73], [81, 124, 50, 248]],
    [[193, 255, 112, 66], [66, 204, 202, 47], [152, 114, 215, 102], [201, 14, 229, 158]],
    [[42, 38, 123, 159], [104, 234, 177, 176], [240, 152, 102, 214], [57, 150, 131, 72]],
    [[58, 202, 41, 141], [82, 32, 152, 61], [162, 184, 254, 235], [155, 46, 125, 163]],
    [[16, 53, 35, 153], [66, 21, 187, 164], [224, 173, 69, 79], [123, 131, 56, 236]],
    [[202, 50, 237, 184], [136, 39, 86, 28], [104, 138, 19, 83], [19, 9, 43, 191]]
])

#S box for AES
sbox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
        0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
        0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
        0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
        0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
        0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
        0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
        0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
        0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
        0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
        0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
        0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
        0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
        0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
        0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
        0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
        0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
sbox = np.array(sbox)

#constant state matrix
CSM = np.array([[2,3,1,1],
                [1,2,3,1],
                [1,1,2,3],
                [3,1,1,2]])

def generate_key_matrix(key):
    """
    input:
        key:  128 bit integer (msut contain 16 digits)
    output:
        state_array: 4x4 matrix of integers
    """
    key = str(key)
    if len(key) != 16:
        print("Invalid key length")
    else:
        rows = 4
        columns = 4
        total_chars = rows * columns
        key_padded = key + ' ' * (total_chars - len(key))
        state_array = [[int(key_padded[i * columns + j]) for j in range(columns)] for i in range(rows)]
        return state_array

def add_round_key(in_hex, rk):
  """
  input:
    in_hex: 4x4 matrix dtype: hex
    rk: round key 4x4 matrix dtype: hex
  output:
    added_rk: 4x4  matrix contining the result of xor operation
  """
  added_round_key = np.array(in_hex) ^ np.array(rk)
  return added_round_key

def substitute_byte(in_matrix):
  """
  input:
    in_matrix: 4x4 matrix, dtype: hex
  output:
    sub_byte: contain the sbox value of every element corresponding to in_matrix, dtype: hex
  """
  sub_byte = [[0]*4 for _ in range(4)]
  for i in range(4):
    for j in range(4):
     sub_byte[i][j] = sbox[in_matrix[i][j]]
  return sub_byte

def shift_rows(sb):
  """
  input:
    sb: (substituted byte) 4x4 matrix, dtype: hex
  output:
    shifted_rows: contain the shifted rows corresponding to in_matrix, dtype: hex
  """
  shifted_rows = [[0]*4 for _ in range(4)]
  shifted_rows = [[sb[0][0], sb[0][1], sb[0][2], sb[0][3] ],
                [sb[1][1], sb[1][2], sb[1][3], sb[1][0] ],
                [sb[2][2], sb[2][3], sb[2][0], sb[2][1] ],
                [sb[3][3], sb[3][0], sb[3][1], sb[3][2] ]]
  return shifted_rows

def single_round(in_matrix,key):
  """
  input:
    in_matrix:  4x4 matrix, dtype: hex
    key: sub_key for the current round
  output:
    round_out: output from the curernt round(4x4) matrix, dtype: hex
  """
  sb = substitute_byte(in_matrix)


  print(" ")
  for i in range(4):
    for j in range(4):
      print(hex(sb[i][j]),end =" ")
    print("")

  sr = shift_rows(sb)

  print(" ")
  for i in range(4):
    for j in range(4):
      print(hex(sr[i][j]),end =" ")
    print("")
  mc = mix_column(sr)
  print(" ")
  for i in range(4):
    for j in range(4):
      print(hex(mc[i][j]),end =" ")
    print("")

  round_out = add_round_key(mc,key)
  print(" ")
  for i in range(4):
    for j in range(4):
      print(hex(round_out[i][j]),end =" ")
    print("")


  return round_out

plain_text = 7098765432112345
plain_text_grid = generate_key_matrix(plain_text)
y = add_round_key(plain_text_grid,ROUND_KEY[0])

print("")
for i in range(4):
  for j in range(4):
    print(hex(y[i][j]),end= " ")
  print("")

z = single_round(y,ROUND_KEY[1])

print("")
for i in range(4):
  for j in range(4):
    print(hex(ROUND_KEY[1][i][j]),end= " ")
  print("")


print("")
for i in range(4):
  for j in range(4):
    print(hex(z[i][j]),end= " ")
  print("")

