

import numpy as np

#test round key generated using AES-Key-Generator.py
ROUND_KEY = np.array([
    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 0, 9, 8], [7, 6, 5, 4]],
    [[111, 105, 241, 193], [106, 111, 246, 201], [99, 111, 255, 193], [100, 105, 250, 197]],
    [[148, 68, 87, 130], [254, 43, 161, 75], [157, 68, 94, 138], [249, 45, 164, 79]],
    [[72, 13, 211, 27], [182, 38, 114, 80], [43, 98, 44, 218], [210, 79, 136, 149]],
    [[196, 201, 249, 174], [114, 239, 139, 254], [89, 141, 167, 36], [139, 194, 47, 177]],
    [[241, 220, 49, 147], [131, 51, 186, 109], [218, 190, 29, 73], [81, 124, 50, 248]],
    [[193, 255, 112, 66], [66, 204, 202, 47], [152, 114, 215, 102], [201, 14, 229, 158]],
    [[42, 38, 123, 159], [104, 234, 177, 176], [240, 152, 102, 214], [57, 150, 131, 72]],
    [[58, 202, 41, 141], [82, 32, 152, 61], [162, 184, 254, 235], [155, 46, 125, 163]],
    [[16, 53, 35, 153], [66, 21, 187, 164], [224, 173, 69, 79], [123, 131, 56, 236]],
    [[202, 50, 237, 184], [136, 39, 86, 28], [104, 138, 19, 83], [19, 9, 43, 191]]
])

#S box for AES
sbox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
        0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
        0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
        0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
        0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
        0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
        0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
        0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
        0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
        0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
        0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
        0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
        0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
        0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
        0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
        0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
        0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
sbox = np.array(sbox)

#constant state matrix
CSM = np.array([[2,3,1,1],
                [1,2,3,1],
                [1,1,2,3],
                [3,1,1,2]])


#lookup tabel for galiuos finite field multiplication
mult_by_2 = np.array([0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5])

mult_by_3 = np.array([0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
])

def generate_key_matrix(key):
    """
    input:
        key: 16-digit integer
    output:
        state_array: 4x4 matrix of integers
    """
    key = str(key)
    if len(key) != 16:
        print("Invalid key length")
        return None
    else:
        i = 0
        state_array = np.zeros((4,4),dtype = int)
        for j in range(4):
          for k in range(4):
            state_array[k][j] = int(key[i])
            i = i + 1
        return state_array



def add_round_key(in_hex, rk):
  """
  input:
    in_hex: 4x4 matrix dtype: hex
    rk: round key 4x4 matrix dtype: hex
  output:
    added_rk: 4x4  matrix contining the result of xor operation
  """
  added_round_key = np.array(in_hex) ^ np.array(rk)
  return added_round_key

def substitute_byte(in_matrix):
  """
  input:
    in_matrix: 4x4 matrix, dtype: hex
  output:
    sub_byte: contain the sbox value of every element corresponding to in_matrix, dtype: hex
  """
  sub_byte = [[0]*4 for _ in range(4)]
  for i in range(4):
    for j in range(4):
     sub_byte[i][j] = sbox[in_matrix[i][j]]
  return sub_byte

def shift_rows(sb):
  """
  input:
    sb: (substituted byte) 4x4 matrix, dtype: hex
  output:
    shifted_rows: contain the shifted rows corresponding to in_matrix, dtype: hex
  """
  shifted_rows = [[0]*4 for _ in range(4)]
  shifted_rows = [[sb[0][0], sb[0][1], sb[0][2], sb[0][3] ],
                [sb[1][1], sb[1][2], sb[1][3], sb[1][0] ],
                [sb[2][2], sb[2][3], sb[2][0], sb[2][1] ],
                [sb[3][3], sb[3][0], sb[3][1], sb[3][2] ]]
  return shifted_rows

def mix_coloum(s):
  s_prime = np.zeros((4,4),dtype =int)
  for j in range(4):
    s_prime[0][j] = mult_by_2[s[0][j]] ^ mult_by_3[s[1][j]] ^ s[2][j]            ^ s[3][j]
    s_prime[1][j] = s[0][j]            ^ mult_by_2[s[1][j]] ^ mult_by_3[s[2][j]] ^ s[3][j]
    s_prime[2][j] = s[0][j]            ^ s[1][j]            ^ mult_by_2[s[2][j]] ^ mult_by_3[s[3][j]]
    s_prime[3][j] = mult_by_3[s[0][j]] ^ s[1][j]            ^ s[2][j]            ^ mult_by_2[s[3][j]]
  return s_prime

def single_round(in_matrix,key):
  """
  input:
    in_matrix:  4x4 matrix, dtype: hex
    key: sub_key for the current round
  output:
    round_out: output from the curernt round(4x4) matrix, dtype: hex
  """
  sb = substitute_byte(in_matrix)   #
  sr = shift_rows(sb)
  mc = mix_coloum(sr)
  round_out = add_round_key(mc,key)
  return round_out

def last_round(in_matrix,key): #last round does not contain Mix_column opearation
  """
  input:
    in_matrix:  4x4 matrix, dtype: hex
    key: sub_key for the current round
  output:
    round_out: output from the curernt round(4x4) matrix, dtype: hex
  """
  sb = substitute_byte(in_matrix)   #
  sr = shift_rows(sb)
  round_out = add_round_key(sr,key)
  return round_out

def AES_encryp(plain_text):
    plain_text_grid = np.zeros((4,4),dtype = int)
    plain_text_grid = generate_key_matrix(plain_text)
    #add 0th round key
    r = np.zeros((4,4),dtype = int)
    r = add_round_key(plain_text_grid,np.transpose(ROUND_KEY[0]))
    for i in range(1,10):
      r = single_round(r,np.transpose(ROUND_KEY[i]))
    r = last_round(r, np.transpose(ROUND_KEY[10]));
    return r

plain_text = 7098765432112345
en = AES_encryp(plain_text)

for i in range(4):
  for j in range(4):
    print(hex(en[i][j]), end =" ")
  print(" ")

