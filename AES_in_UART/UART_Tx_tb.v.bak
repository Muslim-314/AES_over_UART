`timescale 1ns / 1ps

module UART_Tx_tb;

    // Parameters
    parameter BAUD_RATE = 115200;
    parameter CLOCK_PERIOD = 1e9 / BAUD_RATE;

    // Signals
    reg clk = 0;
    reg en = 0;
    reg start = 0;
    reg [7:0] in_data = 8'hFF;
    wire out;
    wire done;
    wire busy;

    // Instantiate Baud Rate Generator
    BaudRateGenerator #(CLOCK_RATE, BAUD_RATE) brg (
        .clk(clk),
        .rxClk(),
        .txClk()
    );

    // Instantiate UART Transmitter
    UART_Tx uart_tx (
        .clk(brg.txClk),
        .en(en),
        .start(start),
        .in(in_data),
        .out(out),
        .done(done),
        .busy(busy)
    );

    // Clock generation
    always #(CLOCK_PERIOD / 2) clk = ~clk;

    // Test sequence
    initial begin
        // Reset
        en = 0;
        start = 0;
        in_data = 8'hFF;

        // Enable UART
        en = 1;
        #100;

        // Transmit data
        start = 1;
        #10;
        start = 0;

        // Wait for transmission to complete
        #100;

        // Add more test scenarios as needed

        // End simulation
        $finish;
    end

    // Add assertion for verifying output behavior if needed

endmodule
